#!/usr/bin/bash
#Auth: Jack
#Date: 2021/1/17
#Version: 1.0
#Descrition: definition

function ssh_fun() {
   if [[ "$#" -ne 2 ]];then
       echo -e "\033[31m>>[ERROR] Parameter loss, Please check again! \033[0m"
       exit 23
   else
       echo $2 |egrep "(^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$" &> /dev/null || (echo -e "\033[31m>>[ERROR] IP Parameter is invalid ! \033[0m";exit 24)
   fi
   #result=$(timeout $1 ssh -p 22 $2 "$3")
   #[[ "$?" -eq 0 ]] && return $result || echo -e "\033[31m [ERROR] ssh $1 failed ! \033[0m"
}

function red(){
   echo -e "\033[1;31m>>> [ERROR] $1 \033[0m"
   exit 3
}

function green(){
   echo -e "\033[1;32m>>> [OK] $1 \033[0m"
}

function yellow(){
   echo -e "\033[1;33m>>> [WARNING] $1 \033[0m"
}

function print_out(){
   printf "\033[1;34m>>>>>>>>>>>>>>>>>>>>>>>>>>> %s <<<<<<<<<<<<<<<<<<<<<<<<<<<<\033[0m\n" "$1"
}

function print_out_(){
   printf "\033[34m--------------------------- %s ----------------------------\033[0m\n" "$1"
}

function check_system(){
for i in ${MASTER_LIST[*]} ${NODE_LIST[*]}
do
    print_out_ $i
    ssh_fun 5 $i     #IP地址有效性检查
    [[ $(timeout 5 ssh -p 22 $i "uname -r"|awk -F "." '{print $1}') -lt 4 ]] && yellow "Kernel version low than 4.x !" || green "Kernel version detection passed"   #内核版本检测
    [[ $(timeout 5 ssh -p 22 $i "sudo whoami") != "root" ]] && red "No sudo permission in the remote host !" || green "User permission detection passed" #检查是否有sudo权限
    #[[ $(timeout 5 ssh -p 22 $i "df --output=avail /home"|tail -n 1) -lt 199229440 ]] && yellow "/wls disk size low than 200GB !" || green "Disk size detection passed" #检查目标磁盘空间大>小是否小于200G
    [[ $(timeout 5 ssh -p 22 $i "df --output=avail /"|tail -n 1) -lt 41943040 ]] && yellow "/ disk size low than 40GB !" || green "Disk size detection passed" #检查目标磁盘空间大小是否小于200G
    [[ $(timeout 5 ssh -p 22 $i "sed -n '/^search/p' /etc/resolv.conf"|wc -l) -ge 1 ]] && yellow "The remote host reslov.conf file exists in the search domain !" || green "Resolv.conf detection  passwd"  #检查reslov.conf文件是否存在search域
    [[ $(timeout 5 ssh -p 22 $i "df --output=target|grep "^/home$"|wc -l") -ne 1 ]] && red "/home is not mounted on the remote host !" || green "Mount detection passed" #检查是否关闭了swap
    [[ $(timeout 5 ssh -p 22 $i "free |grep "^Swap""|awk '{print $2}') -ne 0 ]] && red "The remote host swap is not closed !" || green "Swapoff detection passed " #检查是否关闭了swap
    [[ "$(timeout 5 ssh -p 22 $i 'sudo firewall-cmd --state' 2>&1)" == "running" ]] && red "The remote host firewalld.service is not shutdown !" || green "Firewalld detection passed" #检查firewalld是否关闭
#其他待补充
done
}

function port_check(){
    /usr/bin/nc -z -v $1 $2 $> /dev/null && return 2 || return 1
}

function etcd_health(){
    etcd_cmd="/usr/local/bin/etcdctl --cacert=$ROOT/certs/ssl/ca.pem --cert=$ROOT/certs/ssl/etcd.pem --key=$ROOT/certs/ssl/etcd-key.pem --endpoints=$1:2379 endpoint health"
    nc -z -v $1 2379 &> /dev/null && timeout 20 ssh -p $SSH_PORT $1 "$etcd_cmd" || red 'Etcd port no open !'
}


function etcd_check(){
    etcd_cmd="/usr/local/bin/etcdctl --cacert=$ROOT/certs/ssl/ca.pem --cert=$ROOT/certs/ssl/etcd.pem --key=$ROOT/certs/ssl/etcd-key.pem --endpoints=$1:2379 endpoint health 2>&1"
    if [ $(timeout 20 ssh -p $SSH_PORT $1 "$etcd_cmd"|grep -o '\<unhealthy\>'|wc -l) -gt 0 ];then
       red "Etcd server is Unhealthy"
       return 1
    else
       green "Etcd server is healthy"
       return 2
    fi
}

function ssh_remote(){
    ssh -p $SSH_PORT $1 "$2"
}

function check_kubeapi(){
    check_result=$(curl --cacert $DIR/certs/ssl/ca.pem --cert $DIR/certs/ssl/server.pem --key $DIR/certs/ssl/server-key.pem https://$1:6443/healthz)
    if [[ $check_result == ok ]];then
       green "Master $i kube-apiserver check OK"
    else
       red "Master $i kube-apiserver check failed!"
    fi
}

function help_addnode(){
    print_out "help"
    echo "
Usage: ./xxx.sh add [namespace|mster_ip] data_back_name node_ip1,node_ip2,....

Reference format:
       ./run.sh add namespace data_back_name node_ip1,node_ip2,node_ip3
"
    print_out "----"
    exit 31
}

function help(){
    print_out "help"
    echo "
function1:
    ./run.sh  
    <Deploy cluster forward env.yml informations!>

function2:
    ./run.sh add namespaces<exsited> data_back_time node_ip1,node_ip2,....
    <Add node_ip1,node_ip2,... to cluster "namespaces\<exsited\>">
"
    print_out "----"
    exit 0
}

export -f ssh_fun
export -f red
export -f green
export -f yellow
export -f print_out
export -f print_out_
export -f check_system
export -f port_check
export -f etcd_health
export -f etcd_check
export -f ssh_remote
export -f check_kubeapi
export -f help_addnode
export -f help

